//打包类型
plugins {
    id 'com.android.application'
}
android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //声明多渠道打包风味维度
        flavorDimensions "channel"
        //混淆配置
        proguardFiles 'proguard-sdk.pro', 'proguard-rules.pro'
        vectorDrawables.useSupportLibrary = true
        //设置支持的设备
        ndk {
            abiFilters "x86","armeabi-v7a", "arm64-v8a"
        }
    }

    //java版本
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // 设置存放 so 文件的目录
    sourceSets {
        main {
            jniLibs.srcDirs = ['armeabi']
        }
    }
    //打包签名
    signingConfigs {
        config {
            storeFile file('../app/src/main/filters/sign/loveproduction.jks')
            storePassword 'zwk.2020452796'
            keyAlias 'key0'
            keyPassword 'zwk.2020452796'
        }
    }
    //构建打包类型
    buildTypes {
        debug {
            debuggable true
            //开启混淆开关
            minifyEnabled false
            //移除无用的resource文件开关
            zipAlignEnabled false
            //压缩对齐开关
            zipAlignEnabled true
            //为BuildConfig.class文件添加新属性，指定主机服务器地址
            buildConfigField 'String','SERVER',getSERVER('debug','SERVER')
            buildConfigField 'String','SERVER_ONE',getSERVER('debug','SERVER_ONE')
            //签名配置信息
            signingConfig signingConfigs.config
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            buildConfigField 'String','SERVER',getSERVER('release','SERVER')
            buildConfigField 'String','SERVER_ONE',getSERVER('release',"SERVER_ONE")
            signingConfig signingConfigs.config
        }
    }

    //输出apk
    android.applicationVariants.all {
        variant ->
            variant.outputs.all {
                outputFileName = rootProject.getName()+"_v"+variant.versionName+"_"+variant.buildType.name+".apk"
            }
    }

    //多渠道打包；运行时可在左边Build Variants选择要运行的版本
    productFlavors {
        xiaomi{
            //为BuildConfig.class文件添加新属性
            buildConfigField 'String','PLATE_FROM','"xiaomi"'
            manifestPlaceholders = [UMENG_CHANNEL_VALUE:"xiaomi"]
            dimension "channel"
        }
        yingyongbao{
            buildConfigField 'String','PLATE_FROM','"yingyongbao"'
            manifestPlaceholders = [UMENG_CHANNEL_VALUE:"yingyongbao"]
            dimension "channel"
        }
    }

}

dependencies {
    api rootProject.ext.support["appcompat-v7"]
    api rootProject.ext.support["design"]
    api rootProject.ext.support["constraintlayout"]
    api rootProject.ext.support["support-annotations"]

    api rootProject.ext.dependencies["zxing-android-embedded"]
    api rootProject.ext.dependencies.okhttp
    api rootProject.ext.dependencies["logging-interceptor"]
    api rootProject.ext.dependencies.retrofit
    api rootProject.ext.dependencies["converter-gson"]
    api rootProject.ext.dependencies["adapter-rxjava"]
    api rootProject.ext.dependencies.autodispose
    api rootProject.ext.dependencies["autodispose-android"]
    api rootProject.ext.dependencies["autodispose-lifecycle"]
    api rootProject.ext.dependencies["autodispose-androidx-lifecycle"]
    api rootProject.ext.dependencies.lottie
    api rootProject.ext.dependencies.MPAndroidChart
    api rootProject.ext.dependencies.glide
    api rootProject.ext.dependencies.compiler
    api rootProject.ext.dependencies.PhotoView
    }
//获取配置文件中的内容
def getSERVER(String context,String Server) {
    def SERVER = null
    Properties properties = new Properties()
    def proFile = file("src/main/filters/"+context+"/config.properties")
    if(proFile.canRead()) {
        properties.load(new FileInputStream(proFile))
        if(properties != null) {
            SERVER = properties[Server]
        }
    }
    return SERVER
}